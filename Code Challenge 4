// Created on Tue March 30 2020
//DECLARE VARIABLES
int l_motor = 0; 	  //Left Motor Port
int r_motor = 2; 	  //Right Motor Port
int l_bump = 8; 	  //Left Bump Sensor Port
int r_bump = 9; 	  //Right Bump Sensor Port
int l_top = 5; 		  //Left Top Hat Sensor Port
int r_top = 6;      	  //Right Top Hat Sensor Port
int lowspeed = 5;   	  //Low Motor Speed
int speed = 60; 	  //Mid Motor Speed
int lspeed = 50; 	  //Mid Motor Speed for Line Follow
int highspeed = 90;	  //High Motor Speed
int pause = 150;          //Reverse Action Pause
int longpause = 645;      //Turning Pause
int target = 200;         //Top Hat Sensor Target
 

//Function Definitions//
void forward (){ 	            //Forward Function Definition
	motor(l_motor,speed);
	motor(r_motor,speed);
}
void right (){ 		            //Right Turn Function Definition
	motor(l_motor,highspeed);
	motor(r_motor,speed);
}
void right2(){ 		            //Right Turn Function Definition
	motor(l_motor,lspeed);
	motor(r_motor,lowspeed);
}
void left (){ 		            //Left Turn Function Definition
	motor(l_motor,-speed);
	motor(r_motor,speed);
	msleep(longpause);
}
void left2 (){ 		            //Left Turn Function Definition
	motor(l_motor,lowspeed);
	motor(r_motor,lspeed);
}
void reverse (){ 		          //Reverse Function Definition
	motor(l_motor,-speed);
	motor(r_motor,-speed);
	msleep(pause);
}

int main()
{
	while (analog (l_top) < target){ //Loop that keeps robot moving right until left top hat sensor is engaged
		right(); //Right Turn Action
	}
	ao();
		
	while (digital (l_bump) <= 0){  //Loop that keeps the robot turning forward until left digital bumper is engaged
		forward(); //Forward Action
	}
	ao();  
	reverse(); //Reverse function that backs robot away from wall
	ao();
	left();  	 //Left Turn to get robot aligned with black line
	
	while (analog (l_top) < target){  //Loop that keeps the robot moving forward until top hat sensor sees black line
		forward(); //Forward Action
	}
	ao();
	
	while (digital (l_bump) <= 0){   //Loop that makes robot follow black line until left digital bumper is engaged
          	if (analog (l_top) < target){  //If statement that makes robot turn right if top hat sensor sees white
                right2(); //Right Turn Action
            }
        	if (analog(l_top) > target){   //If statement that makes robot turn left if top hat sensor sees black
                left2(); //Left Turn Action
            }
     }
	 ao();
	 reverse(); //Reverse function that backs robot away from wall
	 ao();
	 left();  	//Left Turn to get robot aligned with black line
	 
	 while (analog (l_top) < target){  //Loop that keeps the robot moving forward until left top hat sensor sees black line
		forward(); //Forward Action
	}
	ao();
	 
	 while (analog (r_top) < target){   //Loop that makes robot follow line until right top hat detects perp. black line
          	if (analog (l_top) < target){  //If statement that makes robot turn right if top hat sensor sees white
                right2(); //Right Turn Action
            }
        	if (analog(l_top) > target){   //If statement that makes robot turn left if top hat sensor sees black
                left2(); //Left Turn Action
            }
     }
	ao();

}
